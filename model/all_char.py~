'''Trains a simple convnet on the MNIST dataset.
Gets to 99.25% test accuracy after 12 epochs
(there is still a lot of margin for parameter tuning).
16 seconds per epoch on a GRID K520 GPU.
'''
from __future__ import print_function
import keras
from mnist import MNIST
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K


class EM(MNIST):
    def __init__(self, path='./../static/images/samples', mode='rounded_binarized', return_type='numpy', gz=False):
        super().__init__(path, mode, return_type, gz)
        self.test_img_fname = 'emnist-byclass-test-images-idx3-ubyte'
        self.test_lbl_fname = 'emnist-byclass-test-labels-idx1-ubyte'
        self.train_img_fname = 'emnist-byclass-train-images-idx3-ubyte'
        self.train_lbl_fname = 'emnist-byclass-train-labels-idx1-ubyte'

    def select_emnist(self, dataset='byclass'):
        super().select_emnist(dataset)

def model_make():
    mndata = EM('./../static/images/samples')
    batch_size = 30
    num_classes = 47
    epochs = 15
    # input image dimensions
    img_rows, img_cols = 28, 28
    if True:
        # the data, split between train and test sets
        x_train, y_train = mndata.load_training()
        x_test, y_test = mndata.load_testing()
        if K.image_data_format() == 'channels_first':
            x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
            x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
            input_shape = (1, img_rows, img_cols)
        else:
            x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
            x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
            input_shape = (img_rows, img_cols, 1)
        x_train = x_train.astype('float32')
        x_test = x_test.astype('float32')
        x_train /= 255
        x_test /= 255
        print('x_train shape:', x_train.shape)
        print(x_train.shape[0], 'train samples')
        print(x_test.shape[0], 'test samples')
        # convert class vectors to binary class matrices
        y_train = keras.utils.to_categorical(y_train, num_classes)
        y_test = keras.utils.to_categorical(y_test, num_classes)
        model = Sequential()
        model.add(Conv2D(30, (5, 5), input_shape=input_shape, activation='relu'))
        model.add(MaxPooling2D(pool_size=(2, 2)))
        model.add(Conv2D(15, (3, 3), activation='relu'))
        model.add(MaxPooling2D(pool_size=(2, 2)))
        model.add(Dropout(0.3))
        model.add(Flatten())
        model.add(Dense(940, activation='relu'))
        model.add(Dropout(0.1))
        model.add(Dense(470, activation='relu'))
        model.add(Dropout(0.1))
        model.add(Dense(235, activation='relu'))
        model.add(Dense(num_classes, activation='softmax'))
        # Compile model
        model.compile(loss='categorical_crossentropy',
                      optimizer=keras.optimizers.Adadelta(),
                      metrics=['accuracy'])

        model.fit(x_train, y_train,
                  batch_size=batch_size,
                  epochs=epochs,
                  verbose=1,
                  validation_data=(x_test, y_test))
        score = model.evaluate(x_test, y_test, verbose=0)
        print('Test loss:', score[0])
        print('Test accuracy:', score[1])
        with open("char_model_json.json", "w") as json_file:
            json_file.write(model.to_json())
        model.save_weights("char_model.h5")
        message = "success!"
    else:
        message = "fail!"

    return message

print(model_make())
